package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/joho/godotenv"
	"github.com/shomali11/slacker"
	"github.com/slack-go/slack"
)

const (
	envVarPath = "/home/alessandra-goncalves/Documents/estudos/Go/SlackBot_Onboarding/.env"
)

var (
	jiraEmail         = os.Getenv("JIRA_MAIL")
	jiraUrl           = os.Getenv("JIRA_INSTANCE")
	jiraToken         = os.Getenv("JIRA_AUTH_TOKEN")
	slackBotTokenVar  = os.Getenv("SLACK_BOT_TOKEN")
	slackAppTokenVar  = os.Getenv("SLACK_APP_TOKEN")
	projectKeyDefault = os.Getenv("JIRA_PROJECT_KEY_DEFAULT")
)

type Person struct {
	ID       string
	Name     string
	Email    string
	Password string
}

type AutoGenerated struct {
	Fields Fields `json:"fields"`
}
type Issuetype struct {
	Name string `json:"name"`
}
type Project struct {
	Key string `json:"key"`
}
type Customfield10298 struct {
	ID string `json:"id"`
}
type Customfield12100 struct {
	ID string `json:"id"`
}
type Fields struct {
	Summary          string           `json:"summary"`
	Issuetype        Issuetype        `json:"issuetype"`
	Project          Project          `json:"project"`
	Customfield10298 Customfield10298 `json:"customfield_10298"`
	Customfield12100 Customfield12100 `json:"customfield_12100"`
}

func main() {

	err := sendMessageToUser()
	if err != nil {
		log.Fatalf("Error sending message to user. Err: %v", err)
	}

	err = createJiraIssue()
	if err != nil {
		log.Fatalf("Error sending message to user. Err: %v", err)
	}
}

func getSlackAuth() (botToken, appToken string, bot *slacker.Slacker, api *slack.Client, err error) {
	err = godotenv.Load(envVarPath)
	if err != nil {
		return "", "", nil, nil, err
	}

	botToken = os.Getenv(slackBotTokenVar)
	if botToken == "" {
		return "", "", nil, nil, fmt.Errorf("%s environment variable is not set", slackBotTokenVar)
	}
	appToken = os.Getenv(slackAppTokenVar)
	if appToken == "" {
		return "", "", nil, nil, fmt.Errorf("%s environment variable is not set", slackAppTokenVar)
	}

	bot = slacker.NewClient(botToken, appToken)
	api = slack.New(botToken)

	/* bot.BotCommands(){

	} */

	return botToken, appToken, bot, api, nil
}

func getConfig() (password string, err error) {
	err = godotenv.Load(envVarPath)
	if err != nil {
		return "", err
	}

	// return os.Getenv(gmailPasswordVar), nil
	return "", nil
}

// sendMessageToUser function sends an onboarding message to the user
func sendMessageToUser() error {
	_, _, bot, api, err := getSlackAuth()
	if err != nil {
		return err
	}

	bot.Command("Mensagem para <email>", &slacker.CommandDefinition{
		Description: "Send message of onboarding to new coworkers",
		Examples:    []string{"Fazer onboarding da @aleh"},
		Handler: func(botCtx slacker.BotContext, request slacker.Request, response slacker.ResponseWriter) {
			personEmail := request.StringParam("email", "null")
			personEmail = strings.ReplaceAll(personEmail, "<mailto:", "")
			personEmail = strings.ReplaceAll(personEmail, ">", "")
			formatedEmail := strings.Split(personEmail, "|")
			fmt.Println("personEmail: ", formatedEmail[0])
			personName, personID, err := getUserInfo(api, formatedEmail[0])
			if err != nil {
				log.Printf("Some error occured in getUserInfo function. Err %s\n", err)
				return
			}

			mensagemOnboarding := fmt.Sprintf(`Olá %s, agora você faz parte do squad Sebrae :slightly_smiling_face:.
Para o seu processo de onboarding, temos diversos materiais de gestão de conhecimento e apoio no confluence. É muito importante que você entre nesse espaço (também é onde armazenamos as nossas documentações).
Já irei te passar alguns links úteis para o seu dia a dia (alguns desses você provavelmente não tem acesso, mas eles já estão sendo solicitados):
			1. %v (%v)
			2. %v (%v)
			3. %v (%v e %v)
			4. %v (%v)
			5. %v (%v)`, personName, "Confluence SEBRAE", "https://tinyurl.com/confluencesebrae", "Bucket", "https://tinyurl.com/bucketSEB", "GCP de QA e PROD", "https://tinyurl.com/GCPqaSEB", "https://tinyurl.com/GCPsebPROD", "Projeto de Service Ops (para acessar o datalake SEBRAE)", "https://tinyurl.com/ProjServOps", "Épico central do Squad no Jira", "https://tinyurl.com/jiraSEB")

			_, _, err = api.PostMessage(
				personID,
				slack.MsgOptionText(mensagemOnboarding, false),
			)
			if err != nil {
				log.Printf("Some error occured in postMessage to user. Err %s", err)
				return
			}

			str := fmt.Sprintf("Mensagem de onboarding enviada para %v!", personName)
			err = response.Reply(str)
			if err != nil {
				log.Printf("Some error occured in sendMessageToUser Function. Err %s", err)
				return
			}
		},
	})

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	err = bot.Listen(ctx)
	if err != nil {
		log.Fatal(err)
	}

	return err
}

// getUserInfo function returns the person's name and ID based on the email address
func getUserInfo(api *slack.Client, personEmail string) (personName, personID string, err error) {
	err = godotenv.Load(envVarPath)
	if err != nil {
		return "", "", err
	}
	user, err := api.GetUserByEmail(personEmail)
	if err != nil {
		log.Printf("Some error occured in getUserInfo function. Err %s\n", err)
	}

	return user.Profile.RealName, user.ID, err
}

func createJiraIssue() error {

	fmt.Println("entrou na funcao!")
	_, _, bot, _, err := getSlackAuth()
	if err != nil {
		return err
	}

	err = godotenv.Load(envVarPath)
	if err != nil {
		return err
	}

	bot.Command("task <summary>", &slacker.CommandDefinition{
		Description: "Send message of onboarding to new coworkers",
		Examples:    []string{"Fazer onboarding da @aleh"},
		Handler: func(botCtx slacker.BotContext, request slacker.Request, response slacker.ResponseWriter) {
			fmt.Println("entrou no bot!")
			summary := request.StringParam("summary", "null")

			fmt.Println("Summary: ", summary)

			// fmt.Printf("URL: %v, email: %v, key: %v e token: %v", jiraUrl, jiraEmail, key, jiraToken)

			newIssue := AutoGenerated{
				Fields: Fields{

					Summary: "testaaaaaando",
					Issuetype: struct {
						Name string `json:"name"`
					}{
						Name: "Consulting Service",
					},
					Project: struct {
						Key string `json:"key"`
					}{
						Key: projectKeyDefault,
					},
					Customfield10298: struct {
						ID string `json:"id"`
					}{
						ID: "17316",
					},
					Customfield12100: struct {
						ID string `json:"id"`
					}{
						ID: "18816",
					},
				},
			}

			issueJson, err := json.Marshal(&newIssue)
			if err != nil {
				log.Fatal(err)
			}

			// fmt.Println("issueJson", issueJson)

			req, err := http.NewRequest("POST", jiraUrl, bytes.NewBuffer(issueJson))
			if err != nil {
				log.Fatal(err)
			}

			req.SetBasicAuth(jiraEmail, jiraToken)
			req.Header.Set("Content-Type", "application/json")

			resp, err := http.DefaultClient.Do(req)
			if err != nil {
				log.Fatal(err)
			}
			defer resp.Body.Close()

			str := fmt.Sprint("Task criada!")
			err = response.Reply(str)
			if err != nil {
				log.Printf("Some error occured in sendMessageToUser Function. Err %s", err)
				return
			}

			fmt.Println("Status:", resp.Status)
		},
	},
	)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	err = bot.Listen(ctx)
	if err != nil {
		log.Fatal(err)
	}

	return err

}
