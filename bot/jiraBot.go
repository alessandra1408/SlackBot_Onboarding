package main

import (
	"bytes"
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/joho/godotenv"
	"github.com/shomali11/slacker"
	"github.com/slack-go/slack"
)

const (
	envVarPath = "/home/alessandra-goncalves/Documents/estudos/Go/SlackBot_Onboarding/.env"
)

// var (
// 	jiraEmail         = os.Getenv("JIRA_MAIL")
// 	jiraUrl           = os.Getenv("JIRA_INSTANCE")
// 	jiraToken         = os.Getenv("JIRA_AUTH_TOKEN")
// 	slackBotToken     = os.Getenv("SLACK_BOT_TOKEN")
// 	slackAppToken     = os.Getenv("SLACK_APP_TOKEN")
// 	projectKeyDefault = os.Getenv("JIRA_PROJECT_KEY_DEFAULT")
// )

type AutoGenerated struct {
	Fields Fields `json:"fields"`
}
type Issuetype struct {
	Name string `json:"name"`
}
type Project struct {
	Key string `json:"key"`
}
type Customfield10298 struct {
	ID string `json:"id"`
}
type Customfield12100 struct {
	ID string `json:"id"`
}
type Fields struct {
	Summary          string           `json:"summary"`
	Issuetype        Issuetype        `json:"issuetype"`
	Project          Project          `json:"project"`
	Customfield10298 Customfield10298 `json:"customfield_10298"`
	Customfield12100 Customfield12100 `json:"customfield_12100"`
}

func main() {
	err := createJiraIssue()
	if err != nil {
		log.Fatalf("Some error occurred in createJiraIssue. Err %v", err)
	}
}

func getSlackTokens() (string, string, error) {
	err := godotenv.Load(envVarPath)
	if err != nil {
		log.Printf("error reading .env file. Err %v\n", err)
		return "", "", err
	}

	slackBotToken := os.Getenv("SLACK_BOT_TOKEN")
	slackAppToken := os.Getenv("SLACK_APP_TOKEN")

	if slackBotToken == "" {
		return "", "", fmt.Errorf("%s environment variable is not set", slackBotToken)
	}
	if slackAppToken == "" {
		return "", "", fmt.Errorf("%s environment variable is not set", slackAppToken)
	}

	return slackBotToken, slackAppToken, err
}

func getSlackAuth(slackBotToken, slackAppToken string) (*slacker.Slacker, *slack.Client) {

	bot := slacker.NewClient(slackBotToken, slackAppToken)
	api := slack.New(slackBotToken)

	return bot, api
}

func getJiraConfig() (string, string, string, string, error) {
	err := godotenv.Load(envVarPath)
	if err != nil {
		log.Printf("error reading .env file. Err %v\n", err)
		return "", "", "", "", err
	}

	jiraEmail := os.Getenv("JIRA_MAIL")
	jiraUrl := os.Getenv("JIRA_INSTANCE")
	jiraToken := os.Getenv("JIRA_AUTH_TOKEN")
	projectKeyDefault := os.Getenv("JIRA_PROJECT_KEY_DEFAULT")

	return jiraUrl, jiraEmail, jiraToken, projectKeyDefault, err
}

func createJiraIssue() error {
	slackBotToken, SlackAppToken, err := getSlackTokens()
	if err != nil {
		fmt.Printf("erro em ler getSlackAuth. Err %v\n", err)
		return err
	}

	bot, _ := getSlackAuth(slackBotToken, SlackAppToken)

	jiraUrl, jiraEmail, jiraToken, projectKeyDefault, err := getJiraConfig()
	if err != nil {
		fmt.Printf("erro em ler getJiraConfig. Err %v\n", err)
		return err
	}

	bot.Command("task <summary>", &slacker.CommandDefinition{
		Description: "Send message of onboarding to new coworkers",
		Examples:    []string{"Fazer onboarding da @aleh"},
		Handler: func(botCtx slacker.BotContext, request slacker.Request, response slacker.ResponseWriter) {
			summary := request.StringParam("summary", "null")

			flag.StringVar(&summary, "filePath", "", "Should not there be file here?")
			// fmt.Printf("URL: %v, email: %v, key: %v e token: %v", jiraUrl, jiraEmail, key, jiraToken)

			newIssue := AutoGenerated{
				Fields: Fields{

					Summary: summary,
					Issuetype: struct {
						Name string `json:"name"`
					}{
						Name: "Consulting Service",
					},
					Project: struct {
						Key string `json:"key"`
					}{
						Key: projectKeyDefault,
					},
					Customfield10298: struct {
						ID string `json:"id"`
					}{
						ID: "17316",
					},
					Customfield12100: struct {
						ID string `json:"id"`
					}{
						ID: "18816",
					},
				},
			}

			issueJson, err := json.Marshal(&newIssue)
			if err != nil {
				log.Printf("some error occurred. Err %v", err)
			}

			req, err := http.NewRequest("POST", jiraUrl, bytes.NewBuffer(issueJson))
			if err != nil {
				log.Printf("some error occurred. Err %v", err)
			}

			req.SetBasicAuth(jiraEmail, jiraToken)
			req.Header.Set("Content-Type", "application/json")

			resp, err := http.DefaultClient.Do(req)
			if err != nil {
				log.Fatal(err)
			}
			defer resp.Body.Close()

			str := "Task criada!"
			err = response.Reply(str)
			if err != nil {
				log.Printf("Some error occured in sendMessageToUser Function. Err %s", err)
				return
			}
		},
	},
	)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	err = bot.Listen(ctx)
	if err != nil {
		log.Fatal(err)
	}

	return err
}
